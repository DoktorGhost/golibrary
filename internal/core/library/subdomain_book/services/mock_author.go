// Code generated by MockGen. DO NOT EDIT.
// Source: author_service.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	dao "github.com/DoktorGhost/golibrary/internal/core/library/subdomain_book/repositories/postgres/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthorRepository) CreateAuthor(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorRepositoryMockRecorder) CreateAuthor(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).CreateAuthor), name)
}

// DeleteAuthor mocks base method.
func (m *MockAuthorRepository) DeleteAuthor(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockAuthorRepositoryMockRecorder) DeleteAuthor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).DeleteAuthor), id)
}

// GetAllAuthors mocks base method.
func (m *MockAuthorRepository) GetAllAuthors() ([]dao.AuthorTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthors")
	ret0, _ := ret[0].([]dao.AuthorTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthors indicates an expected call of GetAllAuthors.
func (mr *MockAuthorRepositoryMockRecorder) GetAllAuthors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthors", reflect.TypeOf((*MockAuthorRepository)(nil).GetAllAuthors))
}

// GetAuthorByID mocks base method.
func (m *MockAuthorRepository) GetAuthorByID(id int) (dao.AuthorTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", id)
	ret0, _ := ret[0].(dao.AuthorTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID.
func (mr *MockAuthorRepositoryMockRecorder) GetAuthorByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockAuthorRepository)(nil).GetAuthorByID), id)
}

// UpdateAuthor mocks base method.
func (m *MockAuthorRepository) UpdateAuthor(author dao.AuthorTable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", author)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorRepositoryMockRecorder) UpdateAuthor(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).UpdateAuthor), author)
}
